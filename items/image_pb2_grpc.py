# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import image_pb2 as image__pb2


class ImageServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.UploadImage = channel.stream_unary(
                '/ImageService/UploadImage',
                request_serializer=image__pb2.RequestUpload.SerializeToString,
                response_deserializer=image__pb2.Empty.FromString,
                )
        self.DownloadProductImage = channel.unary_stream(
                '/ImageService/DownloadProductImage',
                request_serializer=image__pb2.DownloadProductImageRequest.SerializeToString,
                response_deserializer=image__pb2.DataChunk.FromString,
                )
        self.UploadProductImage = channel.stream_unary(
                '/ImageService/UploadProductImage',
                request_serializer=image__pb2.DataChunk.SerializeToString,
                response_deserializer=image__pb2.UploadProductResponse.FromString,
                )


class ImageServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def UploadImage(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DownloadProductImage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UploadProductImage(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ImageServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'UploadImage': grpc.stream_unary_rpc_method_handler(
                    servicer.UploadImage,
                    request_deserializer=image__pb2.RequestUpload.FromString,
                    response_serializer=image__pb2.Empty.SerializeToString,
            ),
            'DownloadProductImage': grpc.unary_stream_rpc_method_handler(
                    servicer.DownloadProductImage,
                    request_deserializer=image__pb2.DownloadProductImageRequest.FromString,
                    response_serializer=image__pb2.DataChunk.SerializeToString,
            ),
            'UploadProductImage': grpc.stream_unary_rpc_method_handler(
                    servicer.UploadProductImage,
                    request_deserializer=image__pb2.DataChunk.FromString,
                    response_serializer=image__pb2.UploadProductResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ImageService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ImageService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def UploadImage(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/ImageService/UploadImage',
            image__pb2.RequestUpload.SerializeToString,
            image__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DownloadProductImage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/ImageService/DownloadProductImage',
            image__pb2.DownloadProductImageRequest.SerializeToString,
            image__pb2.DataChunk.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UploadProductImage(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/ImageService/UploadProductImage',
            image__pb2.DataChunk.SerializeToString,
            image__pb2.UploadProductResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
